import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import java.net.ConnectException;
import java.util.concurrent.atomic.AtomicLong;


public class LEDclientthread extends Thread {
        // every clientThread is passed which command to send to the server
        int menuSelection;
        // every clientThread is passed the hostname of the server to connect to
        String hostName;
        Socket socket = null;


        AtomicLong totalTime;


        AtomicLong runningThreads;


        boolean printOutput;


        long startTime;
        long endTime;
        clientthread(String hostName, int menuSelection, AtomicLong totalTime, boolean printOutput, AtomicLong runningThreads) {
                this.menuSelection = menuSelection;
                this.hostName = hostName;
                this.totalTime = totalTime;
                this.printOutput = printOutput;
                this.runningThreads = runningThreads;
        }

        public void run() {
                PrintWriter out = null;
                BufferedReader input = null;
                try {
                        //creates a new Socket object and names it socket.
                        //Establishes the socket connection between the client & server
                        //name of the machine & the port number to which we want to connect
                        socket = new Socket(hostName, 15432);
                        if (printOutput) {
                                System.out.print("Establishing connection.");
                        }
                        //opens a PrintWriter on the socket input autoflush mode
                        out = new PrintWriter(socket.getOutputStream(), true);

                        //opens a BufferedReader on the socket
                        input = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                        if (printOutput) System.out.println("\nRequesting output for the '" + menuSelection + "' command from " + hostName);

                        // get the current time (before sending the request to the server)
                        startTime = System.currentTimeMillis();

                        // send the command to the server
                        out.println(Integer.toString(menuSelection));
                        if (printOutput) System.out.println("Sent output");

                        // read the output from the server
                        String outputString;
                        while (((outputString = input.readLine()) != null) && (!outputString.equals("END_MESSAGE"))) {
                                if (printOutput) System.out.println(outputString);
                        }

                        // get the current time (after connecting to the server)
                        endTime = System.currentTimeMillis();
                        // endTime - startTime = the time it took to get the response from the sever
                        totalTime.addAndGet(endTime - startTime);

                }
                catch (UnknownHostException e) {
                        System.err.println("Unknown host: " + hostName);
                        System.exit(1);
                }
                catch (ConnectException e) {
                        System.err.println("Connection refused by host: " + hostName);
                        System.exit(1);
                }
                catch (IOException e) {
                        e.printStackTrace();
                }
// finally, close the socket and decrement runningThreads
                finally {
                        if (printOutput) System.out.println("closing");
                        try {
                                socket.close();
                                runningThreads.decrementAndGet();
                                System.out.flush();
                        }
                        catch (IOException e ) {
                                System.out.println("Couldn't close socket");
                        }
                }

        }

}

